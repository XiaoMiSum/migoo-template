package ${basePackage}.modules.${table.moduleName}.controller.${table.businessName};

import org.springframework.web.bind.annotation.*;
import javax.annotation.Resource;
import org.springframework.validation.annotation.Validated;
import org.springframework.security.access.prepost.PreAuthorize;

import javax.validation.constraints.*;
import javax.validation.*;
import javax.servlet.http.*;
import java.util.*;
import java.io.IOException;

import ${PageResultClassName};
import ${CommonResultClassName};
import static ${CommonResultClassName}.Result.getSuccessful;

import ${basePackage}.controller.${table.moduleName}.${table.businessName}.vo.*;
import ${basePackage}.dal.dataobject.${table.moduleName}.${table.businessName}.${table.className}DO;
import ${basePackage}.convert.${table.moduleName}.${table.businessName}.${table.className}Convert;
import ${basePackage}.service.${table.moduleName}.${table.businessName}.${table.className}Service;

@RestController
##二级的 businessName 暂时不算在 HTTP 路径上，可以根据需要写
@RequestMapping("/${table.businessName}")
@Validated
public class ${table.className}Controller {

@Resource
private ${table.className}Service ${classNameVar}Service;

@GetMapping("/page")
@PreAuthorize("@ss.hasPermission('${permissionPrefix}:query')")
public Result
<PageResult
<${table.className}RespVO>> get${simpleClassName}Page(@Valid ${table.className}PageReqVO pageVO) {
    PageResult
    <${table.className}DO> pageResult = ${classNameVar}Service.get${simpleClassName}Page(pageVO);
        return Result.getSuccessful(${table.className}Convert.INSTANCE.convertPage(pageResult));
        }

        @PostMapping
        @PreAuthorize("@ss.hasPermission('${permissionPrefix}:add')")
        public CommonResult<${primaryColumn.javaType}> create${simpleClassName}(@Valid @RequestBody ${table.className}
        CreateReqVO createReqVO) {
        return Result.getSuccessful(${classNameVar}Service.create${simpleClassName}(createReqVO));
        }

        @PutMapping
        @PreAuthorize("@ss.hasPermission('${permissionPrefix}:update')")
        public CommonResult
        <Boolean> update${simpleClassName}(@Valid @RequestBody ${table.className}UpdateReqVO updateReqVO) {
            ${classNameVar}Service.update${simpleClassName}(updateReqVO);
            return Result.getSuccessful(true);
            }

            @DeleteMapping("/{id}")
            @PreAuthorize("@ss.hasPermission('${permissionPrefix}:remove')")
            public Result
            <Boolean> delete${simpleClassName}(@PathVariable("id") ${primaryColumn.javaType} id) {
                ${classNameVar}Service.delete${simpleClassName}(id);
                return Result.getSuccessful(true);
                }

                @GetMapping("/{id}")
                @PreAuthorize("@ss.hasPermission('${permissionPrefix}:edit')")
                public Result
                <${table.className}RespVO> get${simpleClassName}(@PathVariable("id") ${primaryColumn.javaType} id) {
                    ${table.className}DO ${classNameVar} = ${classNameVar}Service.get${simpleClassName}(id);
                    return Result.getSuccessful(${table.className}Convert.INSTANCE.convert(${classNameVar}));
                    }
                    }
